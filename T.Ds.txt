_______________________1__________________________
______________________11__________________________
______________________111_________________________
_____________________11111________________________
_____________________11111____1___________________
____________________1111111__11___________________
____________________1111111__111__________________
________________1__1111111111111__________________
________________1111111111111111__________________
________________11111111111111111_________________
________________11111111111111111_________________
_______________111111¶¶1111¶¶1111_________________
_______________111111¶¶¶_¶¶¶11111_________________
__________111__111111¶¶¶¶¶¶¶11111__11_____________
___________1111111111¶¶¶¶¶¶¶_1111_111_____________
___________111111111¶¶¶¶¶¶¶1¶11111111_____________
___________111111111¶¶¶¶¶¶¶¶¶1111111______________
____________1111¶¶11¶¶1¶¶¶¶¶¶1111111______________
____________1111¶¶¶¶¶¶1¶¶¶¶¶11111111______________
____________1111¶¶¶¶¶¶1¶¶¶¶¶1111111_______________
_____________1111¶¶¶¶¶¶¶¶¶¶1111111________________
_______________111¶¶¶¶¶¶¶1111111_¶¶¶¶¶¶___________
_______1¶¶¶¶¶¶¶_1111¶¶11111111_1¶¶¶¶¶¶¶¶¶¶¶¶¶11___
11¶¶¶¶¶¶¶¶¶¶¶¶¶¶111____1111111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶
¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶___¶¶¶1¶¶1____11¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶
¶¶¶¶¶¶¶¶¶¶¶_______¶¶¶¶¶¶¶¶__________1¶¶¶¶¶¶¶¶¶¶¶¶¶
¶¶¶¶¶¶1___________¶¶¶¶¶¶¶________________¶¶¶¶¶¶¶¶1
¶¶¶_____________1¶¶¶¶¶¶¶¶____________________¶¶¶1_
_______________¶¶¶¶¶¶¶¶¶__________________________
______________¶¶¶¶¶¶¶¶¶¶__________________________ 



  terminal_open();

  terminal_set('window.size=160x50');
  terminal_set('0xE000: resources\tile.dirt.png');

  terminal_put(0 * 4, 0 * 2, $E000);
  terminal_put(0 * 4, 1 * 2, $E000);
  terminal_put(1 * 4, 0 * 2, $E000);
  terminal_put(1 * 4, 1 * 2, $E000);

  terminal_put(39 * 4, 24 * 2, $E000);

  terminal_refresh();

font: resources/fonts/UbuntuMono-R.ttf, size=12

{$IFDEF FPC}
{$MODESWITCH ADVANCEDRECORDS}
{$ENDIF}

type
  TLayerEnum = (lrTile, lrPath, lrDark, lrObj);

type
  TMapLayer = array of array of Cardinal;

type
  TPlace = record
    X, Y: Integer;
    CurLevel: Integer;
    MaxLevel: Integer;
    Owner: TRaceEnum;
    // class function GetIndex(const AX, AY: Integer): Integer; static;
    // class procedure UpdateRadius(const AID: Integer); static;
    // class function GetCityCount: Integer; static;
    // class procedure Gen; static;
  end;

type

  { TMap }

  TMap = class(TObject)
  private
    FTileSize: Byte;
    FWidth: Word;
    FHeight: Word;
    FMap: array [TLayerEnum] of TMapLayer;
    procedure AddTree(const X, Y: Integer);
    procedure AddMountain(const X, Y: Integer);
  public
    class var Place: array [0 .. TScenario.ScenarioPlacesMax - 1] of TPlace;
    constructor Create;
    procedure Gen;
    procedure Clear; overload;
    procedure Clear(const L: TLayerEnum); overload;
    function InRect(const X, Y, X1, Y1, X2, Y2: Integer): Boolean;
    function InMap(const X, Y: Integer): Boolean;
    property TileSize: Byte read FTileSize;
    property Width: Word read FWidth;
    property Height: Word read FHeight;
    function GetTile(const L: TLayerEnum; X, Y: Integer): Cardinal;
    procedure SetTile(const L: TLayerEnum; X, Y: Integer; Tile: Cardinal);
    function LeaderTile: Cardinal;
    class function GetDist(X1, Y1, X2, Y2: Integer): Integer;
    class function GetDistToCapital(const AX, AY: Integer): Integer;
  end;

  
{$IFDEF FPC}

uses
  Math;

{ TMap }

class function TMap.GetDist(X1, Y1, X2, Y2: Integer): Integer;
begin
  Result := Round(Sqrt(Sqr(X2 - X1) + Sqr(Y2 - Y1)));
end;

class function TMap.GetDistToCapital(const AX, AY: Integer): Integer;
begin
  Result := GetDist(TMap.Place[0].X, TMap.Place[0].Y, AX, AY);
end;

function TMap.InRect(const X, Y, X1, Y1, X2, Y2: Integer): Boolean;
begin
  Result := (X >= X1) and (Y >= Y1) and (X <= X2) and (Y <= Y2);
end;

function TMap.InMap(const X, Y: Integer): Boolean;
begin
  Result := InRect(X, Y, 0, 0, FWidth - 1, FHeight - 1);
end;

procedure TMap.AddTree(const X, Y: Integer);
begin
  case Random(2) of
    0:
      FMap[lrObj][X, Y] := reTreePine;
    1:
      FMap[lrObj][X, Y] := reTreeOak;
  end;
end;

procedure TMap.AddMountain(const X, Y: Integer);
begin
  case RandomRange(0, High(MountainTiles) + 1) of
    0:
      FMap[lrObj][X, Y] := reMountain1;
    1:
      FMap[lrObj][X, Y] := reMountain2;
    2:
      FMap[lrObj][X, Y] := reMountain3;
  else
    FMap[lrObj][X, Y] := reMountain4;
  end;
end;

constructor TMap.Create;
begin
  FWidth := 28 + 2; // 40 + 2;
  FHeight := 20 + 2;
  FTileSize := 32;
end;

procedure TMap.Gen;
var
  X, Y: Integer;
begin
  Clear;
  for Y := 0 to Height - 1 do
    for X := 0 to Width - 1 do
    begin
      FMap[lrTile][X, Y] := reNeutralTerrain;
      if (X = 0) or (X = Width - 1) or (Y = 0) or (Y = Height - 1) then
      begin
        AddMountain(X, Y);
        Continue;
      end;
      case RandomRange(0, 3) of
        0:
          AddTree(X, Y);
      else
        AddMountain(X, Y);
      end;

    end;
end;

procedure TMap.Clear;
var
  L: TLayerEnum;
begin
  for L := Low(TLayerEnum) to High(TLayerEnum) do
  begin
    SetLength(FMap[L], Width, Height);
    Clear(L);
  end;
end;

function TMap.LeaderTile: Cardinal;
begin
  Result := FMap[lrTile][TLeaderParty.Leader.X, TLeaderParty.Leader.Y];
end;

procedure TMap.Clear(const L: TLayerEnum);
var
  X, Y: Integer;
begin
  for Y := 0 to Height - 1 do
    for X := 0 to Width - 1 do
      case L of
        lrTile, lrPath, lrObj:
          FMap[L][X, Y] := 0;
        lrDark:
          FMap[L][X, Y] := 0;
      end;
end;

function TMap.GetTile(const L: TLayerEnum; X, Y: Integer): Cardinal;
begin
  if InMap(X, Y) then
    Result := FMap[L][X, Y]
  else
    Result := 0;
end;

procedure TMap.SetTile(const L: TLayerEnum; X, Y: Integer; Tile: Cardinal);
begin
  FMap[L][X, Y] := Tile;
end;

{$ELSE}

{$IFDEF FPC}

type
  TResEnum = Cardinal;

const
  //
  reNone = 0;
  reDark = 0;
  //
  //
  reMountain1 = $E006;
  reMountain2 = $E007;
  reMountain3 = $E008;
  reMountain4 = $E009;
  //
  reTreePine = $E014;
  reTreeOak = $E015;
  //
  reNeutralTerrain = $E000;
  reTheEmpireTerrain = 1;
  reUndeadHordesTerrain = 2;
  reLegionsOfTheDamnedTerrain = 3;

  //
  reTheEmpireCapital = 0;
  reUndeadHordesCapital = 1;
  reLegionsOfTheDamnedCapital = 2;

  //
  reNeutralCity = -1;
  reTheEmpireCity = 0;
  reUndeadHordesCity = 1;
  reLegionsOfTheDamnedCity = 2;

  //
  reEnemy = 0;
  reGold = 1;
  reBag = 2;

  //
  reMyzrael = 0;
  rePegasusKnight = 0;
  reRanger = 0;
  reArchmage = 0;
  reSquire = 0;
  reArcher = 0;
  reApprentice = 0;
  reAcolyte = 0;
  reAshgan = 0;
  reAshkael = 0;
  reGoblin = 0;
  reGoblinArcher = 0;
  reOrc = 0;
  reGiantSpider = 0;
  reWolf = 0;

type
  TResources = class(TObject)
    constructor Create;
  end;

{$ELSE} 

{$IFDEF FPC}

uses
  SysUtils,
  Classes,
  BearLibTerminal;

{ TResources }

constructor TResources.Create;
var
  I: Word;
  Resources: TStringList;
begin
  Resources := TStringList.Create;
  try
    writeln('LOADING RESOURCES...');
    Resources.LoadFromFile('resources\resources.txt');
    for I := 0 to Resources.Count - 1 do
      if (Trim(Resources[I]) <> '') then
      begin
        terminal_set(Resources[I]);
        writeln(Resources[I]);
      end;
  finally
    FreeAndNil(Resources);
  end;
end;

{$ELSE} 

initialization

{$IFNDEF FPC}
  Init;
{$ENDIF}

finalization

{$IFNDEF FPC}
  Free;
{$ENDIF} 

uses
  DisciplesRL.Scene;

type

  { TSceneMenu }

  TSceneMenu = class(TScene)
  public
    procedure Render; override;
    procedure Update(var Key: Word); override;
  end;

implementation

uses
  BearLibTerminal;

procedure TSceneMenu.Render;
begin

end;

procedure TSceneMenu.Update(var Key: Word);
begin
  case Key of
    TK_ENTER:
      Game.SetScene(scMap);
  end;
end;

{$IFDEF FPC}

uses
  DisciplesRL.Scene;

type

  { TSceneMap }

  TSceneMap = class(TScene)
  public
    procedure Render; override;
    procedure Update(var Key: Word); override;
  end;

implementation

uses
  Math,
  SysUtils,
  Classes,
  BearLibTerminal,
  DisciplesRL.Map;

procedure TSceneMap.Render;
var
  X, Y, MX, MY: Integer;
begin
  terminal_layer(0);
  for Y := 0 to Game.Map.Height - 1 do
    for X := 0 to Game.Map.Width - 1 do
    begin
      terminal_layer(1);
      terminal_put(X * 4, Y * 2, Game.Map.GetTile(lrTile, X, Y));
      terminal_layer(2);
      if (Game.Map.GetTile(lrObj, X, Y) <> 0) then
        terminal_put(X * 4, Y * 2, Game.Map.GetTile(lrObj, X, Y));
    end;
  MX := terminal_state(TK_MOUSE_X) div 4;
  MY := terminal_state(TK_MOUSE_Y) div 2;
  terminal_layer(7);
  terminal_put(MX * 4, MY * 2, $E005);
  if Game.IsDebug then
  begin
    terminal_layer(9);
    terminal_print(1, 1, Format('%dx%d', [MX, MY]));
  end;
end;

procedure TSceneMap.Update(var Key: Word);
begin
  case Key of
    TK_ESCAPE:
      Game.SetScene(scMenu);
  end;
end;

{$ELSE} 


unit DisciplesRL.Scene; // Game

interface

uses
  DisciplesRL.Map,
  DisciplesRL.Resources;

type
  TSceneEnum = (scMenu, scMap);

type

  { TScene }

  TScene = class(TObject)
  private
  
  public
    constructor Create;
    destructor Destroy; override;
    procedure Render; virtual; abstract;
    procedure Update(var Key: Word); virtual; abstract;
  end;	
  
type

  { TGame }

  TGame = class(TScene)
  private
    FIsDebug: Boolean;
    FKey: Word;
    FCanClose: Boolean;
    FGameName: string;
    FGameVersion: string;
    FMap: TMap;
    FScene: array [TSceneEnum] of TScene;
    FSceneEnum: TSceneEnum;
    FResources: TResources;
    procedure MainLoop;
  public
    constructor Create;
    destructor Destroy; override;
    procedure Render; override;
    procedure Update(var Key: Word); override;
    procedure SetScene(const SceneEnum: TSceneEnum);
    property GameName: string read FGameName;
    property GameVersion: string read FGameVersion;
    property IsDebug: Boolean read FIsDebug write FIsDebug;
    property CanClose: Boolean read FCanClose write FCanClose;
    property Map: TMap read FMap write FMap;
    property Resources: TResources read FResources;
  end;

var
  Game: TGame;
  
implementation

uses
  Math,
  SysUtils,
  Classes,
  BearLibTerminal,
  DisciplesRL.Scene.Menu,
  DisciplesRL.Scene.Map;

{ TScene }

constructor TScene.Create;
begin

end;

destructor TScene.Destroy;
begin
  inherited Destroy;
end;

{ TGame }

constructor TGame.Create;
var
  Debug: string;
begin
  inherited Create;
  FGameName := 'DisciplesRL';
  FGameVersion := 'v.0.8';
  FKey := 0;
  FCanClose := False;
  FIsDebug := (ParamCount > 0) and (Trim(ParamStr(1)) = '-d');
  terminal_open();
  FScene[scMenu] := TSceneMenu.Create;
  FScene[scMap] := TSceneMap.Create;
  SetScene(scMenu);
  Debug := '';
  if FIsDebug then
    Debug := '[DEBUG]';
  terminal_set(Trim(Format('window.title=%s %s %s',
    [FGameName, FGameVersion, Debug])));
  FMap := TMap.Create;
  FMap.Gen;
  terminal_set(Format('window.size=%dx%d', [Map.Width * 4, Map.Height * 2]));
  terminal_set('input.filter={keyboard, mouse+}');
  FResources := TResources.Create;
  terminal_refresh();
end;

procedure TGame.MainLoop;
begin
  repeat
    begin
      terminal_clear;
      Render;
    end;
    FKey := 0;
    if terminal_has_input() then
    begin
      FKey := terminal_read();
      Update(FKey);
      Continue;
    end;
    terminal_refresh();
    terminal_delay(1);
  until FCanClose or (FKey = TK_CLOSE);
end;

destructor TGame.Destroy;
var
  I: TSceneEnum;
begin
  FreeAndNil(FResources);
  FreeAndNil(FMap);
  for I := Low(TSceneEnum) to High(TSceneEnum) do
    FreeAndNil(FScene[I]);
  terminal_close();
  inherited;
end;

procedure TGame.Render;
begin
  if (FScene[FSceneEnum] <> nil) then
    FScene[FSceneEnum].Render;
end;

procedure TGame.Update(var Key: Word);
begin
  if (FScene[FSceneEnum] <> nil) then
    FScene[FSceneEnum].Update(Key);
end;

procedure TGame.SetScene(const SceneEnum: TSceneEnum);
begin
  FSceneEnum := SceneEnum;
end;

initialization
  Game := TGame.Create;
  Game.MainLoop;
  
finalization
  FreeAndNil(Game);

end.



